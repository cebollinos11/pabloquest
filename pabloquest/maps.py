import tcod as libtcodfrom gameclass import *import fovimport interface as ifrom monsters import *from image_gestor import *import randomfrom audio import PlaySoundimport custommaps.throneimport custommaps.prisonimport custommaps.chambersimport custommaps.entranceCHANCE_DECO = 20class Door():    def __init__(self):        self.status="closed"                    def open(self):        global DB        self.status="open"        self.owner.wall=0        self.owner.transparent=1        self.owner.icon=" "        self.owner.image = iDoorOpen        fov.new_fov(DB.map)        DB.p.computeFov=1        PlaySound('door')        return 0    def close(self):        global DB        #check for items in the door        for el in DB.inv:            if DB.map[el.x][el.y]==self.owner:                return 0        self.status="closed"        self.owner.wall=1        self.owner.image = iDoorClosed        self.owner.transparent=0        self.owner.icon="+"        i.s("You close the door.")        fov.new_fov(DB.map)        DB.p.computeFov=1        PlaySound('door')        return 1class Tile:    #a tile of the map and its properties    explored=0    def __init__(self, image,wall, transparent,door=None,stairs=None,back_color=libtcod.black):                self.back_color=back_color        self.wall = wall         self.transparent=transparent        self.inv=[]        self.image = image##        if door!=None: print door,self.image                self.door=door        if door:            self.door.owner=self                                                        self.stairs=stairsclass Stage:    hasExit=1    duration=1    music='music/enter.mid'    floor_decoration=[]    wall_decoration=[]    custom=Noneclass Entrance(Stage):    music='music/enter.mid'    duration=1        wall=iWsewers    monsters=[Rat,Lizard]    #monsters=[Vortex]    special_monsters=[GiantRat,Slug]    custom = custommaps.entrance    wall_decoration=['decoration/sewerhole']           def __init__(self):        i.s('')class Sewers(Stage):    music='music/enter.mid'    duration=2    floor=[[',','.'],[libtcod.dark_green,libtcod.dark_gray,libtcod.darker_green]]    wall=iWsewers    monsters=[Rat,Lizard]    #monsters=[Vortex]    special_monsters=[GiantRat,Slug]        wall_decoration=['decoration/sewerhole']           def __init__(self):        i.s('You enter the sewers. The smell is really bad.')class Prison(Stage):    music='music/enter.mid'    duration=1        wall=iWdungeon    monsters=[Guard]    #monsters=[Vortex]    special_monsters=[Guard]    custom = custommaps.prison    wall_decoration=['decoration/skulls']           def __init__(self):        i.s('')    class CastleDungeon(Stage):    music='music/tension.mid'    wall_decoration=['decoration/skulls','decoration/torch']    floor=[['.'],[libtcod.light_gray]]    wall=iWdungeon    monsters=[Skeleton,Guard,Slug]    special_monsters=[DungeonMaster,Zombie]    def __init__(self):        i.s('You climb the stairs from the sewers. Where are you? That looks like the lower level of the castle. The dungeons where hundreds of unlucky people were tortured and jailed.')class CastleRooms(Stage):    duration=3    wall_decoration=['decoration/window','decoration/lamp']    floor=[['.'],[libtcod.light_sky]]    wall=iWrooms    monsters=[Archer,Priest,Guard,Sorceress,Zombie,Thief,AcidBeast,Wizard]    special_monsters=[Necromancer,Assassin]    custom = custommaps.chambers    def __init__(self):        i.s('You left the dungeons. You are now in the castle rooms. Your objetive is in the tower.')class Tower(Stage):    music='music/tension.mid'    wall_decoration=['decoration/window','decoration/torch']        floor=[['.'],[libtcod.desaturated_sky]]    wall=iWtower    monsters=[Archer,Priest,Guard,Sorceress,Thief,AcidBeast,Wizard,InvisibleShape]    special_monsters=[Assassin,HighPriest,Necromancer,InvisibleShape]    def __init__(self):        i.s('You finally found the castle tower. Up there the throne room waits for you.')class ThroneRoom(Stage):    hasExit=0    custom = custommaps.throne        wall_decoration=['decoration/skulls','decoration/torch','decoration/lamp']        floor=[[chr(197)],[libtcod.light_cyan]]    wall=iWthrone    #monsters=[Assassin,HighPriest,Sorceress,Necromancer,AcidBeast,InvisibleShape]    monsters=[Vortex]    special_monsters=[Dragon,Wizard]    def __init__(self):        i.s('Finally, the last step in your quest! You enter the throne room. Find the tax collector and slay him!')    class Locations:    current=0    stages=[Entrance,Sewers,Prison,CastleDungeon,CastleRooms,Tower,ThroneRoom]    def retTile(name):#z=heightmap,r=range    currentLoc=DB.currentLoc    door=None    stairs=None    back_color=libtcod.black        if name == "floor":        ##        icon = random.choice(currentLoc.floor[0])##        color = random.choice(currentLoc.floor[1])        image = iDungFloor.copy()        if CHANCE_DECO>random.randint(1,100):            if len(currentLoc.floor_decoration):                deco=LI(random.choice(currentLoc.floor_decoration),1)                image.blit(deco,(0,0))        wall=0        trans=1##            elif name == 'wall':        image = currentLoc.wall.copy()        wall=1        trans=0                    elif name == 'door':        image = iDoorClosed.copy()        back_color=libtcod.dark_grey        wall=1        trans=0                door=Door()    elif name == 'secret door':        image = currentLoc.wall.copy()                 wall=1        trans=0                door=Door()    elif name == 'stairs':        image=iStairs        icon='>'        color=libtcod.white        wall=0        trans=1        stairs=1            tile = Tile(image,wall,trans,door,stairs,back_color)    return tile    